面向对象设计模式体现的就是抽象的思想，类是对对象的抽象，抽象类是对类的抽象，
接口就是对行为的抽象。

单一职责原则：
一个类、一个方法应该只做一件事情，如果发现有多于一个的变化量，应该把多余的变化量抽离出来。

开闭原则：
对代码的修改是关闭的，对代码大的扩展是开放的。
（一开始就确定业务需求是不现实的，只有在业务变更时发现需要修改类中的原代码，要及时进行代码重构扩展）

里氏替换原则：
子类型必须能够替换掉它们的父类型。
（简单理解：就是本来使用父类的引用，把类替换成实现子类，代码功能正常不受影响）
举个栗子：
public interface Animal {
    void call();
    void eat();
}

public class Cat implements Animal {
    public void call() {}
    public void eat() {}
}

public class Dog implements Dog {
    public void call() {}
    public void eat() {}
}

Animal a = new Cat();
a.call();
a.eat();

将Animal a = new Cat()修改为Cat a = new Cat()，功能不受影响。

依赖倒转原则：
本来是高层模块依赖于低层模块，导致业务变更时高层模块不能改动。
（依赖倒转就是高层模块和低层模块都实现同一个抽象类或接口，互不影响）

迪米特原则：
如果两个类不必彼此直接通信，那么这两个类就不应该发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，
可以通过第三者转发这个调用。
（简单理解：每一个类都应该尽量降低成员的访问权限，通过访问抽象类或接口这个第三者来间接访问具体子类，达到解耦）

合成/聚合复用原则：
尽量使用合成/聚合，尽量不要使用类继承。
聚合：表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分
合成：表示一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样
（合成/聚合复用原则的好处是，优先使用对象的合成/聚合将有助于保持每个类被封装，并被集中在单个任务上，
这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物）