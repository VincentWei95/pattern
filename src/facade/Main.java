package facade;

/**
 * 外观模式：
 * 定义：为子系统中的一组接口提供一个一致的界面。此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 *
 * （简单理解：将一组操作都在一个定义的高层接口中调用，客户端持有高层接口引用调用简化操作）
 *
 * 使用场景：
 * 1、项目设计初期阶段，应该要有意识的将不同的两个层分离，比如MVC的Service和Dao、Service和Controller，
 * 层与层之间建立外观接口
 * 2、项目开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观接口可以减少依赖
 * 3、维护遗留的大型系统，可能系统已经非常难以维护和扩展了，新需求开发要依赖旧系统，
 * 为新系统开发一个外观类，来提供设计粗糙或高度复杂的遗留代码的比较清晰的简单接口，让新系统与外观接口交互，
 * 外观接口与遗留代码做复杂操作
 *
 * 模式例子对象成员说明：
 * {@link Client}:客户端对象，托基金公司购买股票的客户，不需要客户自己直接操作购买股票
 * {@link Fund}:外观接口，基金公司，帮助客户购买多支股票
 * {@link Stock1}:股票类，被外观接口统一管理的类
 * {@link Stock2}:股票类，被外观接口统一管理的类
 */
public class Main {

    public static void main(String[] args) {
        Client client = new Client();
        client.buy();
        client.sale();
    }
}
